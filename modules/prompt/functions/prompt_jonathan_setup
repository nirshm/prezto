
pmodload 'helper'

function prompt_jonathan_precmd {
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))


    ###
    # Truncate the path if it's too long.

    PR_FILLBAR=""
    PR_PWDLEN=""

    local promptsize=${#${(%):---(%n@%m)---()--}}
    local pwdsize=${#${(%):-%~}}

    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
      ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
      PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi

    # Get Git repository information.
    if (( $+functions[git-info] )); then
        git-info
    fi
}


setopt extended_glob
function prompt_jonathan_preexec () {
    if [[ "$TERM" == "screen" ]]; then
        local CMD=${1[(wr)^(*=*|sudo|-*)]}
        echo -n "\ek$CMD\e\\"
    fi
}


function prompt_jonathan_setup() {
    ###
    # Need this so the prompt will work.

    setopt prompt_subst

    autoload -Uz add-zsh-hook
    add-zsh-hook precmd  prompt_jonathan_precmd
    add-zsh-hook preexec prompt_jonathan_preexec

    ###
    # See if we can use colors.

    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
        colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE GREY; do
        eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
        (( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    ###
    # Modify Git prompt
    zstyle ':prezto:module:git:info' verbose 'yes'
    zstyle ':prezto:module:git:info:action' format ':%%B%F{yellow}%s%f%%b'
    zstyle ':prezto:module:git:info:added' format ' %%B%F{green}✚%f%%b'
    zstyle ':prezto:module:git:info:ahead' format ' %%B%F{yellow}⬆%f%%b'
    zstyle ':prezto:module:git:info:behind' format ' %%B%F{yellow}⬇%f%%b'
    zstyle ':prezto:module:git:info:branch' format ':%F{green}%b%f'
    zstyle ':prezto:module:git:info:commit' format ':%F{green}%.7c%f'
    zstyle ':prezto:module:git:info:deleted' format ' %%B%F{red}✖%f%%b'
    zstyle ':prezto:module:git:info:modified' format ' %%B%F{blue}✱%f%%b'
    zstyle ':prezto:module:git:info:position' format ':%F{red}%p%f'
    zstyle ':prezto:module:git:info:renamed' format ' %%B%F{magenta}➜%f%%b'
    zstyle ':prezto:module:git:info:stashed' format ' %%B%F{cyan}✭%f%%b'
    zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{yellow}═%f%%b'
    zstyle ':prezto:module:git:info:untracked' format ' %%B%F{white}◼%f%%b'
    zstyle ':prezto:module:git:info:keys' format \
        'prompt' '%F{blue}( git%f$(coalesce "%b" "%p" "%c")% %A%B%S%a%d%m%r%U%u %%B%F{blue})'

    ###
    # See if we can use extended characters to look nicer.
    # UTF-8 Fixed

    if [[ $(locale charmap) == "UTF-8" ]]; then
        PR_SET_CHARSET=""
        PR_SHIFT_IN=""
        PR_SHIFT_OUT=""
        PR_HBAR="─"
        PR_ULCORNER="┌"
        PR_LLCORNER="└"
        PR_LRCORNER="┘"
        PR_URCORNER="┐"
        PR_END='❯'
    else
        typeset -A altchar
        set -A altchar ${(s..)terminfo[acsc]}
        # Some stuff to help us draw nice lines
        PR_SET_CHARSET="%{$terminfo[enacs]%}"
        PR_SHIFT_IN="%{$terminfo[smacs]%}"
        PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
        PR_HBAR='$PR_SHIFT_IN${altchar[q]:--}$PR_SHIFT_OUT'
        PR_ULCORNER='$PR_SHIFT_IN${altchar[l]:--}$PR_SHIFT_OUT'
        PR_LLCORNER='$PR_SHIFT_IN${altchar[m]:--}$PR_SHIFT_OUT'
        PR_LRCORNER='$PR_SHIFT_IN${altchar[j]:--}$PR_SHIFT_OUT'
        PR_URCORNER='$PR_SHIFT_IN${altchar[k]:--}$PR_SHIFT_OUT'
        PR_END='>'
     fi


    ###
    # Decide if we need to set titlebar text.

    case $TERM in
        xterm*)
            PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
            ;;
        screen)
            PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
            ;;
        *)
            PR_TITLEBAR=''
            ;;
    esac


    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
        PR_STITLE=$'%{\ekzsh\e\\%}'
    else
        PR_STITLE=''
    fi


    ###
    # Finally, the prompt.

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}$PR_CYAN$PR_ULCORNER$PR_HBAR$PR_GREY(\
$PR_GREEN%$PR_PWDLEN<...<%~%<<\
$PR_GREY)$PR_CYAN$PR_HBAR$PR_HBAR${(e)PR_FILLBAR}$PR_HBAR$PR_GREY(\
$PR_CYAN%(!.%SROOT%s.%n)$PR_WHITE@$PR_GREEN%m:%l\
$PR_GREY)$PR_CYAN$PR_HBAR$PR_URCORNER\

$PR_CYAN$PR_LLCORNER$PR_BLUE$PR_HBAR(%f${git_info:+${(e)git_info[prompt]}}$PR_BLUE)$PR_CYAN$PR_HBAR\
>$PR_NO_COLOUR '

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}$PR_CYAN$PR_ULCORNER$PR_HBAR$PR_BLUE(\
$PR_GREEN%$PR_PWDLEN<...<%~%<<\
$PR_BLUE)$PR_CYAN$PR_HBAR$PR_HBAR${(e)PR_FILLBAR}$PR_HBAR$PR_BLUE(\
$PR_CYAN%(!.%SROOT%s.%n)$PR_GREY@$PR_GREEN%m\
$PR_BLUE)$PR_CYAN$PR_HBAR$PR_URCORNER\

$PR_CYAN$PR_LLCORNER$PR_HBAR${git_info:+${(e)git_info[prompt]}}$PR_CYAN$PR_HBAR\
$PR_GREEN$PR_END$PR_NO_COLOUR '

    # display exitcode on the right when >0
    return_code="%(?..%{$fg[red]%}%? ↵ %{$reset_color%})"
    RPROMPT=' $return_code$PR_CYAN$PR_HBAR$PR_HBAR$PR_BLUE\
($PR_YELLOW%D{%H:%M:%S %d-%m}$PR_BLUE)$PR_CYAN$PR_HBAR$PR_LRCORNER$PR_NO_COLOUR'

    PS2='$PR_CYAN$PR_HBAR\
$PR_BLUE$PR_HBAR(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_HBAR\
$PR_CYAN$PR_HBAR$PR_NO_COLOUR '
}

prompt_jonathan_setup "$@"


